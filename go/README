See ../README.

该前端是用C++编写的。
它需要搭配完整的编译器后端才能使用。
目前后端接口已经已使用GCC（称为gccgo）和LLVM（称为GoLLVM）实现。

前端将对输入进行词法分析并解析，然后输出为特定于该前端的IR，称为gogo。

然后，它对代码运行一系列passes。

最后，它将gogo转换为后端IR。这是通过backend.h中描述的接口完成的。

后端必须实现该接口。

当与GCC一起使用时，该接口在gcc/go/go-gcc.cc中实现。

源代码的位置信息使用go-linemap.h中描述的接口表示。

后端应提供一个定义有Location类型的go-locate.h头文件。


前端不会自行启动。

它需要主调程序去调用go_create_gogo函数并将一个后端对象和Linemap对象作为参数传入，当然还有一些额外的参数选项。

然后，它期望主调函数能够调用go_parse_input_files并传入输入文件。

最后，对go_write_globals的调用将导致所有全局定义通过后端接口写出。

后端应提供go诊断定义在go-diagnostics.h底部的函数：比如go_be_error_at等。

这些将用于错误消息。

此编译器可以工作，但代码仍在编写中。

前端很少关注其内存使用情况，也很少释放任何内存。

代码可以使用我们没有时间做的一般清理。



Contributing
=============

To contribute patches to the files in this directory, please see
https://golang.org/doc/gccgo_contribute.html .

The master copy of these files is hosted at
https://go.googlesource.com/gofrontend .  There is a mirror at
https://github.com/golang/gofrontend .  Changes to these files require
signing a Google contributor license agreement.  If you are the
copyright holder, you will need to agree to the individual contributor
https://cla.developers.google.com/about/google-individual .  This
agreement can be completed online.

If your organization is the copyright holder, the organization will
need to agree to the corporate contributor license agreement at
https://cla.developers.google.com/about/google-corporate .

If the copyright holder for your code has already completed the
agreement in connection with another Google open source project, it
does not need to be completed again.
